import{_ as e,c as i,o,a2 as s}from"./chunks/framework.DYZYzxF5.js";const k=JSON.parse('{"title":"Packaging","description":"","frontmatter":{},"headers":[],"relativePath":"en/maafw/NodeJS/J1.3-Packaging.md","filePath":"en/maafw/NodeJS/J1.3-Packaging.md"}'),t={name:"en/maafw/NodeJS/J1.3-Packaging.md"};function n(d,a,l,r,c,p){return o(),i("div",null,a[0]||(a[0]=[s('<h1 id="packaging" tabindex="-1">Packaging <a class="header-anchor" href="#packaging" aria-label="Permalink to &quot;Packaging&quot;">​</a></h1><blockquote><p>Note: This document is about integrating with NodeJS</p></blockquote><p>This project contains binary. <code>@maaxyz/maa-node</code> package will require corresponding <code>MaaNode.node</code> from <code>@maaxyz/maa-node-${platform}-${arch}</code>. Meanwhile, as loaded <code>MaaNode.node</code> dynamic links <code>MaaFramework</code> library, and <code>Adb</code> controller relies on <code>AgentBinary</code>, it is strongly recommended to mark <code>@maaxyz/maa-node</code> as external dependencies and do not participate packaging.</p><p>If you do want to package it, the following should be take cared:</p><ul><li>Usually, packaging tool can only discover <code>MaaNode.node</code>, but won&#39;t aware its dependencies. All <code>dll/so/dylib</code> besides <code>MaaNode.node</code> should be placed the same directory to <code>MaaNode.node</code>.</li><li><code>Adb</code> controller will use <code>../agent</code> applying on the directory of <strong>the library script</strong> to search for MaaAgentBinary. It is also possible to manually configure it in code.</li></ul><h2 id="maa-node-template" tabindex="-1">maa-node-template <a class="header-anchor" href="#maa-node-template" aria-label="Permalink to &quot;maa-node-template&quot;">​</a></h2><p>Refer to <a href="https://github.com/neko-para/maa-node-template" target="_blank" rel="noreferrer">maa-node-template</a>. This template provides a simplified packaging solution with electron.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # use esbuild to build project, refer to scripts/build.mjs</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> watch</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # use esbuild and vite to hot reload, refer to scripts/watch.mjs</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # use electron-forge to package</span></span></code></pre></div>',8)]))}const g=e(t,[["render",n]]);export{k as __pageData,g as default};
