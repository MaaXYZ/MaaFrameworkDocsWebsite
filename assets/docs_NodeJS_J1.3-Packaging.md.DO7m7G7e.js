import{_ as e,c as s,o as i,a2 as t}from"./chunks/framework.DYZYzxF5.js";const k=JSON.parse('{"title":"打包","description":"","frontmatter":{},"headers":[],"relativePath":"docs/NodeJS/J1.3-Packaging.md","filePath":"docs/NodeJS/J1.3-打包.md"}'),o={name:"docs/NodeJS/J1.3-Packaging.md"};function d(n,a,l,p,c,h){return i(),s("div",null,a[0]||(a[0]=[t('<h1 id="打包" tabindex="-1">打包 <a class="header-anchor" href="#打包" aria-label="Permalink to &quot;打包&quot;">​</a></h1><blockquote><p>注意: 本文档是关于如何使用 NodeJS 进行集成</p></blockquote><p>本项目中包含二进制. <code>@maaxyz/maa-node</code>包会从<code>@maaxyz/maa-node-${platform}-${arch}</code>包中获取对应<code>MaaNode.node</code>. 同时, 由于被加载的<code>MaaNode.node</code>动态链接了<code>MaaFramework</code>库, 且<code>Adb</code>控制器依赖<code>AgentBinary</code>, 建议直接将<code>@maaxyz/maa-node</code>作为外部依赖不参与打包.</p><p>如果你确实想要打包, 需要注意以下要点:</p><ul><li>通常打包工具只能发现<code>MaaNode.node</code>, 但不会意识到它的依赖. <code>MaaNode.node</code>旁边的所有<code>dll/so/dylib</code>应当一并放置在<code>MaaNode.node</code>同目录中.</li><li><code>Adb</code>控制器会使用<strong>库脚本</strong>所在目录的<code>../agent</code>目录来搜索MaaAgentBinary. 也可以手动在代码中配置.</li></ul><h2 id="maa-node-template" tabindex="-1">maa-node-template <a class="header-anchor" href="#maa-node-template" aria-label="Permalink to &quot;maa-node-template&quot;">​</a></h2><p>可以参考 <a href="https://github.com/neko-para/maa-node-template">maa-node-template</a>. 该模板提供了简易的electron打包方案.</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> build</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用esbuild构建项目, 参考scripts/build.mjs</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> watch</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用esbuild和vite热重载, 参考scripts/watch.mjs</span></span>\n<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">npm</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> run</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> package</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> # 使用electron-forge进行打包</span></span></code></pre></div>',8)]))}const m=e(o,[["render",d]]);export{k as __pageData,m as default};
