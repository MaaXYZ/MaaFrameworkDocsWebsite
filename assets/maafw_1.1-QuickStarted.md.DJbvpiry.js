import{_ as i,c as a,o as n,a2 as t}from"./chunks/framework.DYZYzxF5.js";const E=JSON.parse('{"title":"快速开始","description":"","frontmatter":{},"headers":[],"relativePath":"maafw/1.1-QuickStarted.md","filePath":"maafw/1.1-快速开始.md"}'),l={name:"maafw/1.1-QuickStarted.md"};function e(p,s,h,k,r,o){return n(),a("div",null,s[0]||(s[0]=[t(`<h1 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h1><h2 id="开发思路" tabindex="-1">开发思路 <a class="header-anchor" href="#开发思路" aria-label="Permalink to &quot;开发思路&quot;">​</a></h2><p>MaaFramework 提供三种集成方案，满足不同开发场景需求：</p><h3 id="方案一-纯-json-低代码编程-通用-ui" tabindex="-1">方案一：纯 JSON 低代码编程（通用 UI） <a class="header-anchor" href="#方案一-纯-json-低代码编程-通用-ui" aria-label="Permalink to &quot;方案一：纯 JSON 低代码编程（通用 UI）&quot;">​</a></h3><p><strong>适用场景</strong>：快速入门、简单逻辑实现</p><p><strong>特点</strong>:</p><ul><li>零编码基础要求</li><li>通过 JSON 配置实现自动化流程</li><li>配套 <a href="https://www.bilibili.com/video/BV1yr421E7MW">🎞️视频教程</a> 和 <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate">⭐项目模板</a></li></ul><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;点击开始按钮&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OCR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 文字识别引擎</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;expected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;开始&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,            </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 目标文本</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 执行点击操作</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击确认图标&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 后续任务链</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;点击确认图标&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TemplateMatch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 图像模板匹配</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;确认.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,        </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 匹配素材路径</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="方案二-json-自定义逻辑扩展-推荐" tabindex="-1">方案二：JSON + 自定义逻辑扩展（推荐） <a class="header-anchor" href="#方案二-json-自定义逻辑扩展-推荐" aria-label="Permalink to &quot;方案二：JSON + 自定义逻辑扩展（推荐）&quot;">​</a></h3><p><strong>💡 v4.x 版本核心特性</strong></p><p><strong>特点</strong>:</p><ul><li>保留 JSON 低代码优势</li><li>通过 AgentServer 注册自定义任务模块</li><li>无缝衔接 <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate">⭐项目模板</a></li></ul><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;点击确认图标&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;自定义处理模块&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;自定义处理模块&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;custom_recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyReco&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// 自定义识别器ID</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;custom_action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyAct&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // 自定义动作ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>💡 通用 UI 会自动连接您的 AgentServer 子进程，并在执行到 <code>MyReco</code>/<code>MyAct</code> 时，调用对应的识别/动作。</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python 伪代码示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maa.agent.agent_server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentServer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注册自定义识别器</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@AgentServer.custom_recognition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyReco&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomReco</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> analyze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 返回您自己处理的识别结果</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 注册自定义动作 </span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@AgentServer.custom_action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyAct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ctx.controller.post_click(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).wait()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 执行点击</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ctx.override_next([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TaskA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TaskB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])      </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 动态调整任务流</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 启动Agent服务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AgentServer.start_up(sock_id)</span></span></code></pre></div><p>完整示例参考 <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate/commit/126a56cefc17bf6c8335c703387d8d3ee2dad4d1">模板 Commit</a>。</p><h3 id="方案三-全代码开发" tabindex="-1">方案三：全代码开发 <a class="header-anchor" href="#方案三-全代码开发" aria-label="Permalink to &quot;方案三：全代码开发&quot;">​</a></h3><p><strong>适用场景</strong>:</p><ul><li>深度定制需求</li><li>复杂业务逻辑实现</li><li>需要灵活控制执行流程</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python 伪代码示例</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 执行 JSON 预定义任务</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasker.post_task(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击开始按钮&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).wait().get()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.completed:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 执行代码级操作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tasker.controller.post_click(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 获取当前屏幕截图</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasker.controller.cached_image</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 注册自定义动作</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tasker.resource.register_custom_action(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyAction())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 执行混合任务链</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tasker.post_task(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;点击确认图标&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).wait()</span></span></code></pre></div><h2 id="资源准备" tabindex="-1">资源准备 <a class="header-anchor" href="#资源准备" aria-label="Permalink to &quot;资源准备&quot;">​</a></h2><h3 id="文件结构规范" tabindex="-1">文件结构规范 <a class="header-anchor" href="#文件结构规范" aria-label="Permalink to &quot;文件结构规范&quot;">​</a></h3><p><em>⭐若您使用项目模板，直接在 <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate/tree/main/assets/resource">文件夹</a> 中修改即可。</em></p><div class="language-tree vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tree</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_resource/</span></span>
<span class="line"><span>├── image/                # 图像素材库</span></span>
<span class="line"><span>│   ├── my_button_ok.png</span></span>
<span class="line"><span>│   └── my_icon_close.png</span></span>
<span class="line"><span>├── model/</span></span>
<span class="line"><span>│   └── ocr/              # 文字识别模型</span></span>
<span class="line"><span>│       ├── det.onnx</span></span>
<span class="line"><span>│       ├── keys.txt</span></span>
<span class="line"><span>│       └── rec.onnx</span></span>
<span class="line"><span>└── pipeline/             # 任务流水线</span></span>
<span class="line"><span>    ├── my_main.json</span></span>
<span class="line"><span>    └── my_subflow.json</span></span></code></pre></div><p>其中以 <code>my_</code> 开头的文件/文件夹均可自行修改名称，其他的则为固定文件名，不可修改，下面依次介绍：</p><h3 id="任务流水线" tabindex="-1">任务流水线 <a class="header-anchor" href="#任务流水线" aria-label="Permalink to &quot;任务流水线&quot;">​</a></h3><p><code>my_resource/pipeline</code> 中的文件，包含主要的脚本执行逻辑，会递归读取目录中所有的 json 格式文件。</p><p>可参考 <a href="3.1-PipelineProtocol">任务流水线协议</a> 进行编写，一个简单的 <a href="https://github.com/MaaXYZ/MaaFramework/blob/main/sample/resource/pipeline/sample.json">demo</a></p><p>小工具：</p><ul><li><a href="https://github.com/MaaXYZ/MaaFramework/blob/main/tools/pipeline.schema.json">JSON Schema</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=nekosu.maa-support">VSCode 插件</a><ul><li>基于 <code>interface.json</code> 配置资源</li><li>支持跳转到任务定义、查找任务引用、重命名任务、补全任务、点击执行任务</li><li>支持按照 MaaPiCli 模式执行</li><li>支持连接后截图并裁剪图片</li></ul></li></ul><h3 id="图像素材" tabindex="-1">图像素材 <a class="header-anchor" href="#图像素材" aria-label="Permalink to &quot;图像素材&quot;">​</a></h3><p><code>my_resource/image</code> 中的文件，主要为 pipeline 所用到的模板匹配图片、特征检测图片等，会按照 pipeline 中设定的 <code>template</code> 等字段读取对应的文件。</p><p>所使用的图片需要是无损原图缩放到 720p 后的裁剪。<strong>除非你完全清楚 MaaFramework 在做什么，否则请使用下面的截图工具来获取图片。</strong></p><ul><li><a href="https://marketplace.visualstudio.com/items?itemName=nekosu.maa-support">VSCode 插件</a></li><li><a href="https://github.com/SweetSmellFox/MFATools">MFA 小工具</a></li><li><a href="https://github.com/MaaXYZ/MaaFramework/tree/main/tools/ImageCropper">图片裁剪及 ROI 获取工具</a></li></ul><h3 id="文字识别模型文件" tabindex="-1">文字识别模型文件 <a class="header-anchor" href="#文字识别模型文件" aria-label="Permalink to &quot;文字识别模型文件&quot;">​</a></h3><p><em>⭐若您使用项目模板，直接按照其文档，运行 <code>configure.py</code> 即可自动部署模型文件。</em></p><p><code>my_resource/model/ocr</code> 中的文件，为 <a href="https://github.com/PaddlePaddle/PaddleOCR">PaddleOCR</a> 转 ONNX 后的模型文件。</p><p>可使用我们的预转换文件：<a href="https://github.com/MaaXYZ/MaaCommonAssets/tree/main/OCR">MaaCommonAssets</a>，选择需要的语种，按照 <a href="#%E5%87%86%E5%A4%87%E8%B5%84%E6%BA%90%E6%96%87%E4%BB%B6">上述</a> 目录结构存放即可。</p><p>若有需要也可以自行对 PaddleOCR 的官方预训练模型进行 fine-tuning （请自行参考 <a href="https://github.com/PaddlePaddle/PaddleOCR">PaddleOCR</a> 官方文档），并转换成 ONNX 文件使用，转换命令可参考 <a href="https://github.com/MaaXYZ/MaaCommonAssets/tree/main/OCR#command">这里</a></p><h2 id="调试" tabindex="-1">调试 <a class="header-anchor" href="#调试" aria-label="Permalink to &quot;调试&quot;">​</a></h2><ul><li><p>使用 <a href="https://github.com/MaaXYZ/MaaFramework/tree/main?tab=readme-ov-file#%E5%BC%80%E5%8F%91%E5%B7%A5%E5%85%B7">开发工具</a></p></li><li><p>部分工具会在同目录下生成 <code>config/maa_option.json</code> 文件，其中：</p><ul><li><code>logging</code>: 保存日志，会生成 <code>debug/maa.log</code>。默认 true 。</li><li><code>save_draw</code>: 保存图像识别可视化结果，会保存运行期间所有图像识别可视化结果绘制图。默认 false 。</li><li><code>stdout_level</code>: 控制台显示日志等级。默认 2（Error），可设为 0 关闭全部控制台日志，或设为 7 打开全部控制台日志。</li></ul></li><li><p>若自行集成，可通过 <code>Toolkit.init_option</code> / <code>MaaToolkitConfigInitOption</code> 接口开启调试选项。生成的 json 文件同上。</p></li></ul><h2 id="运行" tabindex="-1">运行 <a class="header-anchor" href="#运行" aria-label="Permalink to &quot;运行&quot;">​</a></h2><p>使用 通用 UI（如 MaaPiCli, MFA, MFW 等）或者 自行编写集成代码</p><h3 id="使用-maapicli" tabindex="-1">使用 MaaPiCli <a class="header-anchor" href="#使用-maapicli" aria-label="Permalink to &quot;使用 MaaPiCli&quot;">​</a></h3><p><em>⭐若您使用项目模板，直接按照其文档，运行 <code>install.py</code> 后即可自动打包相关文件</em></p><p>使用 Release 包 bin 文件夹中的 MaaPiCli ，并编写 <code>interface.json</code> 置于同目录下，即可使用</p><ul><li><a href="3.2-ProjectInterface">interface.json 文档</a></li><li><a href="https://github.com/MaaXYZ/MaaFramework/blob/main/sample/interface.json">Sample</a></li></ul><p>实践:</p><ul><li><a href="https://github.com/MaaXYZ/M9A/tree/main/assets/interface.json">M9A</a></li></ul><h3 id="自行编写集成代码" tabindex="-1">自行编写集成代码 <a class="header-anchor" href="#自行编写集成代码" aria-label="Permalink to &quot;自行编写集成代码&quot;">​</a></h3><p>请参考 <a href="2.1-Integration">集成文档</a></p>`,51)]))}const c=i(l,[["render",e]]);export{E as __pageData,c as default};
