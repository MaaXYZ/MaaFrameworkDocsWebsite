import{_ as i,c as a,o as e,a2 as n}from"./chunks/framework.DYZYzxF5.js";const d=JSON.parse('{"title":"Quick Start","description":"","frontmatter":{},"headers":[],"relativePath":"en/maafw/1.1-QuickStarted.md","filePath":"en/maafw/1.1-QuickStarted.md"}'),t={name:"en/maafw/1.1-QuickStarted.md"};function l(o,s,p,r,h,k){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="quick-start" tabindex="-1">Quick Start <a class="header-anchor" href="#quick-start" aria-label="Permalink to &quot;Quick Start&quot;">‚Äã</a></h1><h2 id="development-approach" tabindex="-1">Development Approach <a class="header-anchor" href="#development-approach" aria-label="Permalink to &quot;Development Approach&quot;">‚Äã</a></h2><p>MaaFramework provides three integration solutions to meet different development scenarios:</p><h3 id="approach-1-pure-json-low-code-programming-general-ui" tabindex="-1">Approach 1: Pure JSON Low-Code Programming (General UI) <a class="header-anchor" href="#approach-1-pure-json-low-code-programming-general-ui" aria-label="Permalink to &quot;Approach 1: Pure JSON Low-Code Programming (General UI)&quot;">‚Äã</a></h3><p><strong>Applicable Scenarios:</strong> Quick start, simple logic implementation</p><p><strong>Features:</strong></p><ul><li>Zero coding prerequisite</li><li>Automated processes configured through JSON</li><li>Comes with a <a href="https://www.bilibili.com/video/BV1yr421E7MW" target="_blank" rel="noreferrer">üéûÔ∏è video tutorial</a> and a <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate" target="_blank" rel="noreferrer">‚≠ê project template</a></li></ul><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Click Start Button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;OCR&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,          </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Text recognition engine</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;expected&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Start&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,           </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Target text</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,             </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Execute click action</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Confirm Icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">] </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Subsequent task chain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Click Confirm Icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TemplateMatch&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Image template matching</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;template&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;confirm.png&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,     </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Matching asset path</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="approach-2-json-custom-logic-extension-recommended" tabindex="-1">Approach 2: JSON + Custom Logic Extension (Recommended) <a class="header-anchor" href="#approach-2-json-custom-logic-extension-recommended" aria-label="Permalink to &quot;Approach 2: JSON + Custom Logic Extension (Recommended)&quot;">‚Äã</a></h3><p><strong>üí° Core feature of release v4.x</strong></p><p><strong>Features</strong>:</p><ul><li>Retains the low-code advantage of JSON</li><li>Registers custom task modules through AgentServer</li><li>Seamlessly integrates with the <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate" target="_blank" rel="noreferrer">‚≠ê boilerplate</a>.</li></ul><div class="language-jsonc vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">jsonc</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Click Confirm Icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;next&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Custom Processing Module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">]</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    },</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    &quot;Custom Processing Module&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;custom_recognition&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyReco&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// Custom recognizer ID</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Custom&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        &quot;custom_action&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyAct&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">         // Custom action ID</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><p>üí° The General UI will automatically connect to your AgentServer child process, and call the corresponding recognition/action when executing <code>MyReco</code>/<code>MyAct</code>.</p><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python pseudo-code example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> maa.agent.agent_server </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> AgentServer</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Register a custom recognizer</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@AgentServer.custom_recognition</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyReco&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomReco</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> analyze</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx):</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Return your own processed recognition result</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Register a custom action</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">@AgentServer.custom_action</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyAct&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> CustomAction</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> run</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(ctx):</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ctx.controller.post_click(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).wait()  </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Execute click</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        ctx.override_next([</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TaskA&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;TaskB&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">])       </span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Dynamically adjust the task flow</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Start the Agent service</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">AgentServer.start_up(sock_id)</span></span></code></pre></div><p>For a complete example, refer to the <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate/commit/126a56cefc17bf6c8335c703387d8d3ee2dad4d1" target="_blank" rel="noreferrer">template commit</a>.</p><h3 id="approach-3-full-code-development" tabindex="-1">Approach 3: Full-Code Development <a class="header-anchor" href="#approach-3-full-code-development" aria-label="Permalink to &quot;Approach 3: Full-Code Development&quot;">‚Äã</a></h3><p><strong>Applicable Scenarios</strong>:</p><ul><li>Deep customization requirements</li><li>Implementation of complex business logic</li><li>Need for flexible control over the execution flow</li></ul><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># Python pseudo-code example</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # Execute the predefined JSON task</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    result </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasker.post_task(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Start Button&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).wait().get()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> result.completed:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Execute code-level operations</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tasker.controller.post_click(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">100</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Get the current screenshot</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        image </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> tasker.controller.cached_image</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Register a custom action</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tasker.resource.register_custom_action(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;MyAction&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, MyAction())</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # Execute a mixed task chain</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">        tasker.post_task(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;Click Confirm Icon&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">).wait()</span></span></code></pre></div><h2 id="resource-preparation" tabindex="-1">Resource Preparation <a class="header-anchor" href="#resource-preparation" aria-label="Permalink to &quot;Resource Preparation&quot;">‚Äã</a></h2><h3 id="file-structure-specification" tabindex="-1">File Structure Specification <a class="header-anchor" href="#file-structure-specification" aria-label="Permalink to &quot;File Structure Specification&quot;">‚Äã</a></h3><p><em>‚≠êIf you use the boilerplate, just modify it directly in <a href="https://github.com/MaaXYZ/MaaPracticeBoilerplate/tree/main/assets/resource" target="_blank" rel="noreferrer">folder</a>.</em></p><div class="language-tree vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">tree</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_resource/</span></span>
<span class="line"><span>‚îú‚îÄ‚îÄ image/                # Image asset library</span></span>
<span class="line"><span>‚îÇ   ‚îú‚îÄ‚îÄ my_button_ok.png</span></span>
<span class="line"><span>‚îÇ   ‚îî‚îÄ‚îÄ my_icon_close.png</span></span>
<span class="line"><span>‚îú‚îÄ‚îÄ model/</span></span>
<span class="line"><span>‚îÇ   ‚îî‚îÄ‚îÄ ocr/              # Text recognition models</span></span>
<span class="line"><span>‚îÇ       ‚îú‚îÄ‚îÄ det.onnx</span></span>
<span class="line"><span>‚îÇ       ‚îú‚îÄ‚îÄ keys.txt</span></span>
<span class="line"><span>‚îÇ       ‚îî‚îÄ‚îÄ rec.onnx</span></span>
<span class="line"><span>‚îî‚îÄ‚îÄ pipeline/             # Task pipelines</span></span>
<span class="line"><span>    ‚îú‚îÄ‚îÄ my_main.json</span></span>
<span class="line"><span>    ‚îî‚îÄ‚îÄ my_subflow.json</span></span></code></pre></div><p>You can modify the names of files and folders starting with &quot;my_&quot;, but the others have fixed file names and should not be changed. Here&#39;s a breakdown:</p><h3 id="pipeline-json-files" tabindex="-1">Pipeline JSON Files <a class="header-anchor" href="#pipeline-json-files" aria-label="Permalink to &quot;Pipeline JSON Files&quot;">‚Äã</a></h3><p>The files in <code>my_resource/pipeline</code> contain the main script execution logic and recursively read all JSON format files in the directory.</p><p>You can refer to the <a href="./3.1-PipelineProtocol.html">Task Pipeline Protocol</a> for writing these files. You can find a simple <a href="https://github.com/MaaXYZ/MaaFramework/blob/main/sample/resource/pipeline/sample.json" target="_blank" rel="noreferrer">demo</a> for reference.</p><p>Tools:</p><ul><li><a href="https://github.com/MaaXYZ/MaaFramework/blob/main/tools/pipeline.schema.json" target="_blank" rel="noreferrer">JSON Schema</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=nekosu.maa-support" target="_blank" rel="noreferrer">VSCode Extension</a><ul><li>Config resources based on <code>interface.json</code></li><li>Support going to task definition, finding task references, renaming task, completing task, click to launch task</li><li>Support launching as MaaPiCli</li><li>Support screencap and crop image after connected</li></ul></li></ul><h3 id="image-files" tabindex="-1">Image Files <a class="header-anchor" href="#image-files" aria-label="Permalink to &quot;Image Files&quot;">‚Äã</a></h3><p>The files in <code>my_resource/image</code> are primarily used for template matching images, feature detection images, and other images required by the pipeline. They are read based on the <code>template</code> and other fields specified in the pipeline.</p><p>Please note that the images used need to be cropped from the lossless original image and scaled to 720p. <strong>UNLESS YOU EXACTLY KNOW HOW MAAFRAMEWORK PROCESSES, DO USE THE CROPPING TOOLS BELOW TO OBTAIN IMAGES.</strong></p><ul><li><a href="https://github.com/MaaXYZ/MaaFramework/tree/main/tools/ImageCropper" target="_blank" rel="noreferrer">Image Cropping and ROI Extraction Tool</a></li><li><a href="https://marketplace.visualstudio.com/items?itemName=nekosu.maa-support" target="_blank" rel="noreferrer">VSCode Extension</a></li><li><a href="https://github.com/SweetSmellFox/MFATools" target="_blank" rel="noreferrer">MFA Tools</a></li></ul><h3 id="text-recognition-model-files" tabindex="-1">Text Recognition Model Files <a class="header-anchor" href="#text-recognition-model-files" aria-label="Permalink to &quot;Text Recognition Model Files&quot;">‚Äã</a></h3><p><em>‚≠êIf you use the boilerplate, just follow its documentation and run <code>configure.py</code> to automatically deploy the model file.</em></p><p>The files in <code>my_resource/model/ocr</code> are ONNX models obtained from <a href="https://github.com/PaddlePaddle/PaddleOCR" target="_blank" rel="noreferrer">PaddleOCR</a> after conversion.</p><p>You can use our pre-converted files: <a href="https://github.com/MaaXYZ/MaaCommonAssets/tree/main/OCR" target="_blank" rel="noreferrer">MaaCommonAssets</a>. Choose the language you need and store them according to the directory structure mentioned above in <a href="#prepare-resource-files">Prepare Resource Files</a>.</p><p>If needed, you can also fine-tune the official pre-trained models of PaddleOCR yourself (please refer to the official PaddleOCR documentation) and convert them to ONNX files for use. You can find conversion commands <a href="https://github.com/MaaXYZ/MaaCommonAssets/tree/main/OCR#command" target="_blank" rel="noreferrer">here</a>.</p><h2 id="debug" tabindex="-1">Debug <a class="header-anchor" href="#debug" aria-label="Permalink to &quot;Debug&quot;">‚Äã</a></h2><ul><li><p>Use <a href="https://github.com/MaaXYZ/MaaFramework/blob/main/README_en.md#development-tool" target="_blank" rel="noreferrer">Development Tool</a>.</p></li><li><p>Some tools will generate <code>config/maa_option.json</code> file in the same directory, including:</p><ul><li><code>logging</code>: Save the log and generate <code>debug/maa.log</code>. Default true.</li><li><code>save_draw</code>: Saves the image recognition visualization results. All image recognition visualization results drawings during the run will be saved. Default false.</li><li><code>stdout_level</code>: The console displays the log level. The default is 2 (Error), which can be set to 0 to turn off all console logs, or to 7 to turn on all console logs.</li></ul></li><li><p>If you integrate it yourself, you can enable debugging options through the <code>Toolkit.init_option</code> / <code>MaaToolkitConfigInitOption</code> interface. The generated json file is the same as above.</p></li></ul><h2 id="run" tabindex="-1">Run <a class="header-anchor" href="#run" aria-label="Permalink to &quot;Run&quot;">‚Äã</a></h2><p>You can using Generic UI (MaaPiCli, MFA, MFW, etc) or by writing integration code yourself.</p><h3 id="using-maapicli" tabindex="-1">Using MaaPiCli <a class="header-anchor" href="#using-maapicli" aria-label="Permalink to &quot;Using MaaPiCli&quot;">‚Äã</a></h3><p><em>‚≠êIf you use the boilerplate, follow its documentation directly and run <code>install.py</code> to automatically package the relevant files.</em></p><p>Use MaaPiCli in the <code>bin</code> folder of the Release package, and write <code>interface.json</code> and place it in the same directory to use it.</p><p>The Cli has completed basic function development, and more functions are being continuously improved! Detailed documentation needs to be further improved. Currently, you can refer to <a href="https://github.com/MaaXYZ/MaaFramework/blob/main/sample/interface.json" target="_blank" rel="noreferrer">Sample</a> to write it.</p><p>Examples:</p><ul><li><a href="https://github.com/MaaXYZ/M9A/tree/main/assets/interface.json" target="_blank" rel="noreferrer">M9A</a></li></ul><h3 id="writing-integration-code-yourself" tabindex="-1">Writing Integration Code Yourself <a class="header-anchor" href="#writing-integration-code-yourself" aria-label="Permalink to &quot;Writing Integration Code Yourself&quot;">‚Äã</a></h3><p>Please refer to the <a href="./2.1-Integration.html">Integration Documentation</a>.</p>`,51)]))}const g=i(t,[["render",l]]);export{d as __pageData,g as default};
