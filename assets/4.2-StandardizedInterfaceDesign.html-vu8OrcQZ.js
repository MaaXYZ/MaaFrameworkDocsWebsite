import{_ as t,c as a,a as n,o}from"./app-DhFehVeD.js";const i={};function r(s,e){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="standardized-high-level-language-object-oriented-interface-design" tabindex="-1"><a class="header-anchor" href="#standardized-high-level-language-object-oriented-interface-design"><span>Standardized High-Level Language Object-Oriented Interface Design</span></a></h1><p>Binding can be divided into two steps:</p><ol><li>Standardize the OOP (Object-Oriented Programming) encapsulation of the C API. Since the MaaFW (Mobile Application Framework) interface is relatively stable, once this step is completed, it does not require long-term maintenance.</li><li>Based on step 1, parse parameters such as callback messages, detail JSON, and pipeline overrides, and encapsulate them into different functions and structures. These fields may change with MaaFW updates and will need long-term follow-up with new versions of MaaFW.</li></ol><p>If you wish to add a binding for a certain language to MaaFW, you can choose one of the following methods according to your available time and resources:</p><h2 id="standardized-interface" tabindex="-1"><a class="header-anchor" href="#standardized-interface"><span>Standardized Interface</span></a></h2><ol><li><strong>MaaTasker, MaaResource, MaaController</strong> should be encapsulated as objects rather than procedural interfaces. For instance, interfaces like <code>MaaContextGetTasker</code> should return objects rather than handles. You may consider two models: <ol><li>Add a global handle-object reference dictionary, and use the handle to find and return the original object.</li><li>The object is stateless and only responsible for referencing handles, directly creating and returning new objects (refer to the <code>own</code> field in Python bindings).</li></ol></li><li><strong>MaaTaskId, MaaCtrlId, MaaResId</strong> and other asynchronous action IDs should not be returned to the integrator. Encapsulate them into a <code>Job</code> class within the binding, providing methods like <code>wait</code>, <code>status</code>, and <code>get</code>.</li><li>The <code>Job</code> class should provide encapsulations for all methods that can operate on the given ID. For example, the <code>get</code> method of <code>TaskJob</code> should return encapsulated data obtained from <code>MaaTaskerGetTaskDetail</code>.</li><li><strong>MaaRecoId, MaaNodeId</strong> and other query-type IDs should not be returned to the integrator. The binding should call interfaces like <code>MaaTaskerGetRecoDetail</code> and encapsulate the results into structures such as <code>RecoDetail</code> and <code>NodeDetail</code> before returning them.</li><li><strong>CustomAction, CustomRecognition, NotificationCallback</strong>, etc., need to be encapsulated into an agent, preferably a virtual base class. The actual object passed to MaaFW should be a pointer within the agent, which will convert various parameters into types commonly used in the target language before passing them to the integrator.</li><li>In the agent for <strong>CustomAction</strong> and <strong>CustomRecognition</strong>, please encapsulate parameters of <code>MaaCustomRecognitionCallback/MaaCustomActionCallback</code> (excluding context) into structures before passing them to the integrator to avoid compatibility issues with future callback parameter additions. The return values should also be encapsulated into structures.</li><li>Each enumeration in <code>SetOption</code> should be split into separate interfaces, such as <code>set_screenshot_target_long_side</code>, rather than providing the specific enumeration to the integrator.</li><li>Buffers like <strong>StringBuffer, ImageBuffer</strong> should not be returned to the integrator. They need to be converted into the target language&#39;s standard string and image types before being provided.</li><li>For interfaces such as <strong>BindResource, BindController, RegisterCustom</strong>, ensure that a reference is kept to avoid garbage collection issues.</li><li>For the <strong>Find</strong> series of interfaces in <code>MaaToolkit</code>, directly return encapsulated arrays of structures.</li><li>Provide samples where the interface calls should not be fewer than those in the Python samples.</li></ol><h2 id="additional-parsing-and-encapsulation" tabindex="-1"><a class="header-anchor" href="#additional-parsing-and-encapsulation"><span>Additional Parsing and Encapsulation</span></a></h2><ol><li>The NotificationCallback wrapped interface parses the message and dispatches it to different methods (refer to MaaMsg.h). For example, <code>on_resource_loading_starting(data)</code>. ResourceLoading can also be dispatched as an Event enumeration and Starting as a Type enumeration, such as <code>on_notification(event, type, data)</code>. Among them, <code>data</code> is the structure parsed by detail_json, instead of directly giving the original json.</li><li>For the NotificationCallback wrapped interface, you can consider adding the on_unknown_notification method to temporarily deal with the subsequent messages added by MaaFW. You can also consider adding the raw field or other fields representing unknown content to the structure parsed by detail_json.</li><li>Split detail_json obtained by <code>MaaTaskerGetRecognitionDetail</code> into all_results, filtered_results, best_result (note that best may be null), and parse them into different structures according to the algorithm</li><li>More: TODO...</li></ol>',8)]))}const c=t(i,[["render",r]]),l=JSON.parse('{"path":"/en-us/framework/4.2-StandardizedInterfaceDesign.html","title":"Standardized High-Level Language Object-Oriented Interface Design","lang":"en-US","frontmatter":{"description":"Standardized High-Level Language Object-Oriented Interface Design Binding can be divided into two steps: Standardize the OOP (Object-Oriented Programming) encapsulation of the C...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Standardized High-Level Language Object-Oriented Interface Design\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-19T09:11:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MaaFramework\\"}]}"],["meta",{"property":"og:url","content":"https://maafw.xyz/MaaFramework-Docs-Website/en-us/framework/4.2-StandardizedInterfaceDesign.html"}],["meta",{"property":"og:site_name","content":"MaaFramework"}],["meta",{"property":"og:title","content":"Standardized High-Level Language Object-Oriented Interface Design"}],["meta",{"property":"og:description","content":"Standardized High-Level Language Object-Oriented Interface Design Binding can be divided into two steps: Standardize the OOP (Object-Oriented Programming) encapsulation of the C..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T09:11:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T09:11:31.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://maafw.xyz/MaaFramework-Docs-Website/zh-cn/framework/4.2-StandardizedInterfaceDesign.html"}]]},"git":{"createdTime":1750324291000,"updatedTime":1750324291000,"contributors":[{"name":"weinibuliu","username":"weinibuliu","email":"weinibuliu@outlook.com","commits":1,"url":"https://github.com/weinibuliu"}]},"readingTime":{"minutes":2.09,"words":628},"filePathRelative":"en-us/framework/4.2-StandardizedInterfaceDesign.md","autoDesc":true}');export{c as comp,l as data};
