import{_ as l,c as s,b as t,a as o,d as n,e as i,w as a,r as p,o as d}from"./app-DhFehVeD.js";const m={};function c(g,e){const r=p("RouteLink");return d(),s("div",null,[e[11]||(e[11]=t("h1",{id:"terms",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#terms"},[t("span",null,"Terms")])],-1)),e[12]||(e[12]=t("h2",{id:"maafw-terminology",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#maafw-terminology"},[t("span",null,"MaaFW Terminology")])],-1)),t("ul",null,[t("li",null,[e[3]||(e[3]=t("p",null,[t("strong",null,"Node")],-1)),t("p",null,[e[1]||(e[1]=n("A complete Json Object that conforms to ")),i(r,{to:"/en-us/application/3.1-PipelineProtocol.html"},{default:a(()=>e[0]||(e[0]=[n("the Pipeline protocol")])),_:1,__:[0]}),e[2]||(e[2]=n("."))])]),e[9]||(e[9]=o("<li><p><strong>Task</strong></p><p>A logical sequence structure in which several <strong>Node</strong> are connected in a certain order, representing the entire process from beginning to end.</p></li><li><p><strong>Entry</strong></p><p>The first <strong>Node</strong> in a <strong>Task</strong>.</p></li><li><p><strong>Pipeline</strong></p><p>All <strong>Node</strong> contained in a <code>pipeline</code> folder.</p></li><li><p><strong>Bundle</strong></p><p>A folder stored in a standard resource structure, including <code>pipeline</code>, <code>model</code>, <code>image</code> and other folders.</p></li><li><p><strong>Resource</strong></p><p>A resource structure in which multiple <strong>Bundles</strong> are loaded in a certain order.</p></li>",5)),t("li",null,[e[8]||(e[8]=t("p",null,[t("strong",null,"PI")],-1)),t("p",null,[e[5]||(e[5]=t("code",null,"ProjectInterface",-1)),e[6]||(e[6]=n(", A standardized project structure declaration that conforms to ")),i(r,{to:"/en-us/zh_cn/3.2-ProjectInterface%E5%8D%8F%E8%AE%AE.html"},{default:a(()=>e[4]||(e[4]=[n("the ProjectInterface definition")])),_:1,__:[4]}),e[7]||(e[7]=n("."))])]),e[10]||(e[10]=t("li",null,[t("p",null,[t("strong",null,"Agent")]),t("p",null,[n("ðŸ’¡ MaaFW v4.x version highlights, that it can separate the MaaFW body and "),t("code",null,"CustomRecognition"),n(" / "),t("code",null,"CustomAction"),n(" into two independent processes."),t("br"),n(" For example, the body runs in a common GUI written in C#, and at the same time runs your own Custom logic in Python code, breaking the language barrier.")])],-1))]),e[13]||(e[13]=o('<h2 id="general-terms" tabindex="-1"><a class="header-anchor" href="#general-terms"><span>General terms</span></a></h2><ul><li><p><strong>Binding</strong></p><p>Provides glue code to convert MaaFW&#39;s C language interface to other programming languages â€‹â€‹or operating system services.<br> Reference to <a href="https://en.wikipedia.org/wiki/Language_binding" target="_blank" rel="noopener noreferrer">WIKI</a>.</p></li><li><p><strong>ROI</strong></p><p>Define the image recognition boundary and perform relevant image processing only within this area.<br> Reference to <a href="https://en.wikipedia.org/wiki/Region_of_interest" target="_blank" rel="noopener noreferrer">WIKI</a>.</p></li><li><p><strong>OCR</strong></p><p>OCR software is used to convert handwritten, type-written or printed text into data that can be edited on a computer.<br> Reference to <a href="https://en.wikipedia.org/wiki/Optical_character_recognition" target="_blank" rel="noopener noreferrer">WIKI</a>.</p></li></ul>',2))])}const f=l(m,[["render",c]]),h=JSON.parse('{"path":"/en-us/application/1.2-ExplanationOfTerms.html","title":"Terms","lang":"en-US","frontmatter":{"description":"Terms MaaFW Terminology Node A complete Json Object that conforms to . Task A logical sequence structure in which several Node are connected in a certain order, representing the...","head":[["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Terms\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-06-19T09:11:31.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"MaaFramework\\"}]}"],["meta",{"property":"og:url","content":"https://maafw.xyz/MaaFramework-Docs-Website/en-us/application/1.2-ExplanationOfTerms.html"}],["meta",{"property":"og:site_name","content":"MaaFramework"}],["meta",{"property":"og:title","content":"Terms"}],["meta",{"property":"og:description","content":"Terms MaaFW Terminology Node A complete Json Object that conforms to . Task A logical sequence structure in which several Node are connected in a certain order, representing the..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"og:locale:alternate","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-06-19T09:11:31.000Z"}],["meta",{"property":"article:modified_time","content":"2025-06-19T09:11:31.000Z"}],["link",{"rel":"alternate","hreflang":"zh-cn","href":"https://maafw.xyz/MaaFramework-Docs-Website/zh-cn/application/1.2-ExplanationOfTerms.html"}]]},"git":{"createdTime":1750324291000,"updatedTime":1750324291000,"contributors":[{"name":"weinibuliu","username":"weinibuliu","email":"weinibuliu@outlook.com","commits":1,"url":"https://github.com/weinibuliu"}]},"readingTime":{"minutes":0.77,"words":230},"filePathRelative":"en-us/application/1.2-ExplanationOfTerms.md","autoDesc":true}');export{f as comp,h as data};
